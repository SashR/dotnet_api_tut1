Minimal APIs are architected to create HTTP APIs with minimal dependencies. 
They are ideal for microservices and apps that want to include only the minimum files, features, 
and dependencies in ASP.NET Core.

This tutorial teaches the basics of building a minimal web API with ASP.NET Core.
No controllers.

Trust the HTTPS development certificate by running the following command:
dotnet dev-certs https --trust

****
This tutorial focuses on creating a web API, so we'll delete the Swagger code and the 
WeatherForecast code. Replace the contents of the Program.cs file with the following:

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet("/", () => "Hello World!");

app.Run()

Remove the two "launchUrl": "swagger", lines from the Properties/launchSettings.json file. 
When the launchUrl isn't specified, the web browser requests the / endpoint.

Run the app. Hello World! is displayed. The updated Program.cs file contains a minimal but complete app


NuGet packages for EF core:
dotnet add package Microsoft.EntityFrameworkCore.InMemory
dotnet add package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore


The sample app contains the following model:
class Todo
{
    public int Id { get; set; }
    public string? Name { get; set; }
    public bool IsComplete { get; set; }
}
A model is a class that represents data that the app manages. The model for this app is the Todo class.

The sample app also contains the following database context class:
class TodoDb : DbContext
{
    public TodoDb(DbContextOptions<TodoDb> options)
        : base(options) { }

    public DbSet<Todo> Todos => Set<Todo>();
}
The database context is the main class that coordinates Entity Framework functionality for a data model. 
This class is created by deriving from the Microsoft.EntityFrameworkCore.DbContext class.

The following highlighted code adds the database context to the dependency injection (DI) container and 
enables displaying database-related exceptions:
builder.Services.AddDbContext<TodoDb>(opt => opt.UseInMemoryDatabase("TodoList"));
builder.Services.AddDatabaseDeveloperPageExceptionFilter();
The DI container provides access to the database context and other services.



Prevent over-posting
Currently the sample app exposes the entire Todo object. Production apps typically limit the data that's 
input and returned using a subset of the model. There are multiple reasons behind this and security is a 
major one. The subset of a model is usually referred to as a Data Transfer Object (DTO), input model, or 
view model. DTO is used in this article.

A DTO may be used to:
Prevent over-posting.
Hide properties that clients are not supposed to view.
Omit some properties in order to reduce payload size.
Flatten object graphs that contain nested objects. Flattened object graphs can be more convenient for 
clients.
To demonstrate the DTO approach, update the Todo class to include a secret field:

C#

Copy
public class Todo
{
    public int Id { get; set; }
    public string? Name { get; set; }
    public bool IsComplete { get; set; }
    public string? Secret { get; set; }
}
The secret field needs to be hidden from this app, but an administrative app could choose to expose it.

Verify you can post and get the secret field.

Create a DTO model:
public class TodoItemDTO
{
    public int Id { get; set; }
    public string? Name { get; set; }
    public bool IsComplete { get; set; }

    public TodoItemDTO() { }
    public TodoItemDTO(Todo todoItem) =>
    (Id, Name, IsComplete) = (todoItem.Id, todoItem.Name, todoItem.IsComplete);
}


Differences between minimal APIs and APIs with controllers
No support for filters: For example, no support for IAsyncAuthorizationFilter, IAsyncActionFilter, IAsyncExceptionFilter, IAsyncResultFilter, and IAsyncResourceFilter.
No support for model binding, i.e. IModelBinderProvider, IModelBinder. Support can be added with a custom binding shim.
No support for binding from forms. This includes binding IFormFile. We plan to add support for IFormFile in the future.
No built-in support for validation, i.e. IModelValidator
No support for application parts or the application model. There's no way to apply or build your own conventions.
No built-in view rendering support. We recommend using Razor Pages for rendering views.
No support for JsonPatch
No support for OData
No support for ApiVersioning. See this issue for more details.