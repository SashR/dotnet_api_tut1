Minimal APIs are architected to create HTTP APIs with minimal dependencies. 
They are ideal for microservices and apps that want to include only the minimum files, features, 
and dependencies in ASP.NET Core.

This tutorial teaches the basics of building a minimal web API with ASP.NET Core.
No controllers.

Trust the HTTPS development certificate by running the following command:
dotnet dev-certs https --trust

****
This tutorial focuses on creating a web API, so we'll delete the Swagger code and the 
WeatherForecast code. Replace the contents of the Program.cs file with the following:

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet("/", () => "Hello World!");

app.Run()

Remove the two "launchUrl": "swagger", lines from the Properties/launchSettings.json file. 
When the launchUrl isn't specified, the web browser requests the / endpoint.

Run the app. Hello World! is displayed. The updated Program.cs file contains a minimal but complete app


NuGet packages for EF core:
dotnet add package Microsoft.EntityFrameworkCore.InMemory
dotnet add package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore


The sample app contains the following model:
class Todo
{
    public int Id { get; set; }
    public string? Name { get; set; }
    public bool IsComplete { get; set; }
}
A model is a class that represents data that the app manages. The model for this app is the Todo class.

The sample app also contains the following database context class:
class TodoDb : DbContext
{
    public TodoDb(DbContextOptions<TodoDb> options)
        : base(options) { }

    public DbSet<Todo> Todos => Set<Todo>();
}
The database context is the main class that coordinates Entity Framework functionality for a data model. 
This class is created by deriving from the Microsoft.EntityFrameworkCore.DbContext class.

The following highlighted code adds the database context to the dependency injection (DI) container and 
enables displaying database-related exceptions:
builder.Services.AddDbContext<TodoDb>(opt => opt.UseInMemoryDatabase("TodoList"));
builder.Services.AddDatabaseDeveloperPageExceptionFilter();
The DI container provides access to the database context and other services.

